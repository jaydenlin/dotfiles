:set showmode
:set surround
:set multiple-cursors
:set easymotion
:set relativenumber
:set number
":set clipboard+=unnamed
:set nofoldenable    
"Move
nmap <S-h> b
vmap <S-h> b
nmap <S-l> w
vmap <S-l> w
nmap <S-j> 10j
vmap <S-j> 10j
nmap <S-k> 10k
vmap <S-k> 10k

nmap z; mx$a;<Esc>`x<Esc>
imap z; <Esc>mx$a;<Esc>`x
nmap z, mx$xa,<Esc>`x<Esc>
imap z, <Esc>mx$xa,<Esc>`x
vmap i <Esc>i
vmap o <Esc>o
"vmap t \>
"vmap p (
"vmap o "
"vmap b {
nmap cao ca"
nmap cio ci"
nmap cab /{<CR>ca{
nmap caab ?{<CR>ca{
nmap cib /{<CR>ci{
nmap ciib ?}<CR>ci{
nmap cau /[<CR>ca[
nmap caau ?[<CR>ca[
nmap ciu /[<CR>ci[
nmap ciiu ?[<CR>ci[
nmap cfo cf"
nmap cto ct"
nmap cip /(<CR>ci(
nmap ciip ?(<CR>ci(
nmap cap /(<CR>ca(
nmap caap ?(<CR>ca(
nmap dap /(<CR>da(
nmap daap ?(<CR>da(
nmap dip /(<CR>di(
nmap diip ?(<CR>di(
nmap dao da"
nmap dio di"
nmap vip vi)
nmap vio vi"
nmap vao va"
nmap vap va)
nmap vtp vt)
nmap ,p "0p
nmap ,P "0P
imap z,p <Esc>"0pa
imap z,P <Esc>"0Pa
nmap zl /(<CR>l
imap zl <Esc>/(<CR>l
vmap zl /)<CR>

nmap zh h?(<CR>l
imap zh <Esc>h?(<CR>l
vmap zh ?(<CR>
"warp
nmap zso csw"
imap <Esc>zso csw"
nmap zst csw>
imap <Esc>zst csw>

":nmap zb /{<CR>l
":imap zb <Esc>/{<CR>l
":nmap ze /}<CR>l
":imap ze <Esc>/}<CR>l
":nmap z, vi)
:nmap z. vi}
:nmap z) vi)
:nmap z} vi}
:nmap z" vi"
:nmap z' vi'
:nmap zxx ci]

:imap jj <Esc>
:imap zz <Esc>
:vmap zz <Esc>
:nmap <BS> a<BS>
":nmap zh ^
":nmap hh ^
":imap zh <Esc>^i
":nmap zl $
":nmap ll $
":imap zl <End>
:nmap hc ^C
:nmap zcw ciw
:vmap zcw <Esc>ciw
:imap zd <Esc>ddjo
:nmap zd ddjo
nmap qq ZQ
nmap zq :wq<CR>
:nmap <BS> a<BS>

imap <F1> <Esc>mby?@Test<CR>`bp?void<CR>w
nmap <F1> mby?@Test<CR>`bp?void<CR>w

imap <F2> <Esc>mby?def<CR>`bp?def<CR>f"w
nmap <F2> mby?def<CR>`bp?def<CR>f"w

nmap zj :action Back<CR>
imap zj <Esc>:action Back<CR>
nmap zk :action Forward<CR>
imap zk <Esc>:action Forward<CR>
nmap zn :action GotoNextError<CR>
imap zn <Esc>:action GotoNextError<CR>
nmap zf :action GotoDeclaration<CR>
imap zf <Esc>:action GotoDeclaration<CR>
nmap zu :action FindUsages<CR>
imap zu <Esc>:action FindUsages<CR>
nmap ze /\u<CR>hvbc
vmap ze b<Esc>/\u<CR>hvbc
imap ze <Esc>/\u<CR>hvbc
nmap zt /class<CR>
imap zt <Esc>/class<CR>
nmap zgc zz:action CheckinProject<CR>

nmap zra zz:action RearrangeCode<CR>zz:action ReformatCode<CR>zz:action Rerun<CR>
imap zra <Esc>zz:action RearrangeCode<CR>zz:action ReformatCode<CR>zz:action Rerun<CR>

map zrr :action RenameElement<CR>

map zri :action Inline<CR>
imap zri <Esc>:action Inline<CR>
map zrf :action IntroduceField<CR>
imap zrf <Esc>:action IntroduceField<CR>
map zrp :action IntroduceParameter<CR>
imap zrp <Esc>:action IntroduceParameter<CR>

nmap zsp f":action IntroduceParameter<CR>

map zrv :action IntroduceVariable<CR>
vmap zrv <Esc>:action IntroduceVariable<CR>
imap zrv <Esc>:action IntroduceVariable<CR>
vmap zrm :action ExtractMethod<CR>
vmap M :action ExtractMethod<CR>
:vmap \s :action SurroundWith<CR>
map zrt :action SearchEverywhere<CR>
imap zrt <Esc>:action SearchEverywhere<CR>
map zro :action Move<CR>
imap zro <Esc>:action Move<CR>
map <C-D> :action EditorDuplicateLines<CR>
imap <C-D> <Esc>:action EditorDuplicateLines<CR>
map <C-A-K> :action MoveLineUp<CR>:action VimAutoIndentLines<CR>
imap <C-A-K> <Esc>:action MoveLineUp<CR>:action VimAutoIndentLines<CR>
map <C-A-J> :action MoveLineDown<CR>:action VimAutoIndentLines<CR>
imap <C-A-J> <Esc>:action MoveLineDown<CR>:action VimAutoIndentLines<CR>
map <A-D> :action EditorDeleteLine<CR>
imap <A-D> <Esc>:action EditorDeleteLine<CR>
:nmap ,m :action FileStructurePopup<CR>
:nmap zcc ci"
:nmap zaa ca"
nmap <A-u> :redo<CR>

nmap ,g :action Generate<CR>

nmap <Space> :action AceAction<CR>
"nmap <Space> <leader><leader>s :action KJumpAction 
"nmap <C-\> :action AceTargetAction<CR>

"mark
nmap z0 mx
imap z0 <Esc>mx
nmap z00 `x
imap z00 <Esc>`x

nmap z1 ma
imap z1 <Esc>ma
nmap z11 `a
imap z11 <Esc>`a

nmap z2 mb
imap z2 <Esc>mb
nmap z22 `b
imap z22 <Esc>`b

nmap z3 mc
imap z3 <Esc>mc
nmap z33 `c
imap z33 <Esc>`c

:nnoremap j k
:nnoremap k j
:vnoremap j k
:vnoremap k j
